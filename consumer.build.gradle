plugins {
	id 'java'
	id 'groovy'
	id 'idea'
	id 'org.springframework.boot' version '1.5.8.RELEASE'
	id "org.asciidoctor.convert" version "1.5.3"
	id "nebula.release" version "6.1.0"
	id "com.gorylenko.gradle-git-properties" version "1.4.17"
}

apply plugin: 'groovy'

task wrapper(type: Wrapper) {
	gradleVersion = '4.2'
}


ext {
	buildTime = new Date().format("yyyyMMddHHmm")
	snippetsDir = file('src/docs/generated-snippets')
	keycloakVersion = '4.8.3.Final'
}

bootRun {
	systemProperties = System.properties
}

jar {
	baseName = project.name

	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}

}

group = ''
description = ''
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	maven {
		url "$artifactory_contexturl/$artifactory_repo"
	}
}

dependencyManagement {
	imports {
		mavenBom "org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Dalston.SR4"
	}
}


dependencies {
	compile 'com.acme.common:acme-mvc-exception:1.0.2'
	compile 'com.acme.common:bluestem-metrics-spring-boot-starter:0.0.41'
	
	//Keycloak security
	compile 'org.keycloak:keycloak-spring-boot-starter:4.8.3.Final'
	compile 'com.acme.common:acme-keycloak-multi-realm-spring-security-starter:0.1.4'

	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework.boot:spring-boot-starter-validation'
	compile 'org.springframework.boot:spring-boot-starter-security'
	
	//Database
	compile 'org.springframework.boot:spring-boot-starter-data-jpa'
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile 'org.springframework.boot:spring-boot-starter-data-redis'

	compile 'org.springframework.cloud:spring-cloud-starter-sleuth'
	compile 'org.springframework.cloud:spring-cloud-starter-zipkin'
	compile 'com.github.vital-software:sumo-logback:61f68e2049d1b02b61fdd497d67268b1382eb319'
	compile 'com.sumologic.plugins.log4j:sumologic-log4j2-appender:1.0'
	compile 'ch.qos.logback:logback-classic:1.2.3' // purposely upgrade logback from spring base version
	compile 'ch.qos.logback:logback-core:1.2.3'

	compile 'org.flywaydb:flyway-core:5.2.4'
	compile 'org.postgresql:postgresql'

	compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	compile 'org.hibernate:hibernate-java8:5.0.12.Final'
	compile 'org.apache.httpcomponents:httpclient'

	// extra metrics support
	compile 'com.ryantenney.metrics:metrics-spring:3.1.3'

	compile('org.springframework.kafka:spring-kafka')
	compile "org.keycloak:keycloak-spring-security-adapter:${keycloakVersion}"

	testCompile 'org.springframework.boot:spring-boot-starter-test'
	testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testCompile 'org.springframework.security:spring-security-test'
	testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
	testCompile 'org.codehaus.groovy:groovy-all:2.4.9'
	testCompile 'cglib:cglib-nodep:3.2.5'
	testCompile "org.springframework.cloud:spring-cloud-starter-contract-stub-runner:2.1.5.RELEASE"
	testCompile("com.acme.cds:acme-cds-hab-data-access-service:+:stubs"){
		transitive = true
	}
}

processResources {
	logger.lifecycle("project.properties about to be expanded")
	logger.lifecycle("----")
	def map = project.properties.sort { it.key }

	if (logger.isEnabled(LogLevel.DEBUG)) {
		map.each { k, v -> logger.debug(":") }
	}

	filesMatching('**/application-actuatorsupport.properties') {
		expand project.properties
	}
}

bootRun {
	// this allows the postman tests to have test resources and configuration on the classpath
	classpath = sourceSets.test.runtimeClasspath
}

gitProperties {
	dateFormat = "yyyy-MM-dd'T'HH:mmZ"
	dateFormatTimeZone = 'CST'
}

test {
	outputs.dir snippetsDir
	systemProperties = System.properties
}

asciidoctor {
	dependsOn test
	inputs.dir snippetsDir
	sourceDir = file('src/docs')
	separateOutputDirs = false
	attributes 'snippets': snippetsDir
}

apply from: 'tests.gradle'
